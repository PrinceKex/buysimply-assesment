version: "3.8"

services:
  # Application service
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - NODE_ENV=${NODE_ENV:-development}
    container_name: buysimply-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=${DB_USER:-postgres}
      - DATABASE_PASSWORD=${DB_PASSWORD:-postgres}
      - DATABASE_NAME=${DB_NAME:-buysimply}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET:-your-secret-key}
      - RATE_LIMIT_MAX=${RATE_LIMIT_MAX:-100}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-15}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    volumes:
      - .:/app
      - /app/node_modules
    command: sh -c "npm run build && npm run start:dev"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Database service
  postgres:
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_DB=${DB_NAME:-buysimply}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis service
  redis:
    image: redis:7-alpine
    container_name: buysimply-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  # Migration service
  migrations:
    image: node:20-alpine
    container_name: buysimply-migrations
    working_dir: /app
    command: >
      sh -c "
      echo '=== Installing dependencies ===' && \
      apk add --no-cache curl && \
      npm config set update-notifier false && \
      npm cache clean --force && \
      echo '=== Installing npm packages ===' && \
      npm install -g npm@latest --no-audit --prefer-offline && \
      npm install dotenv typeorm @types/node ts-node --no-audit --prefer-offline --no-fund && \
      echo '=== Starting migrations ===' && \
      node scripts/run-migrations.js"
    volumes:
      - .:/app
      - /app/node_modules
      - ~/.npm:/root/.npm  # Cache npm packages between builds
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=${DB_USER:-postgres}
      - DATABASE_PASSWORD=${DB_PASSWORD:-postgres}
      - DATABASE_NAME=${DB_NAME:-buysimply}
      - NODE_ENV=development
      - DEBUG=typeorm:*
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h postgres -U postgres -d ${DB_NAME:-buysimply}"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
